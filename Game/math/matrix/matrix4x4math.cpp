#include "../math.h"

matrix4x4math::matrix4x4math() : matrixsquaremath(4) { }

char* matrix4x4math::squareMultiply(char* out, char* matrix, char* matrix1) { char ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
short* matrix4x4math::squareMultiply(short* out, char* matrix, char* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
short* matrix4x4math::squareMultiply(short* out, short* matrix, short* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
int* matrix4x4math::squareMultiply(int* out, short* matrix, short* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
int* matrix4x4math::squareMultiply(int* out, int* matrix, int* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
long long* matrix4x4math::squareMultiply(long long* out, int* matrix, int* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
long long* matrix4x4math::squareMultiply(long long* out, long long* matrix, long long* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__int128* matrix4x4math::squareMultiply(__int128* out, long long* matrix, long long* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__int128* matrix4x4math::squareMultiply(__int128* out, __int128* matrix, __int128* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
float* matrix4x4math::squareMultiply(float* out, float* matrix, float* matrix1) { float ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
double* matrix4x4math::squareMultiply(double* out, float* matrix, float* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
double* matrix4x4math::squareMultiply(double* out, double* matrix, double* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__float128* matrix4x4math::squareMultiply(__float128* out, double* matrix, double* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__float128* matrix4x4math::squareMultiply(__float128* out, __float128* matrix, __float128* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }

char* matrix4x4math::identity(char* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
short* matrix4x4math::identity(short* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
int* matrix4x4math::identity(int* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
long long* matrix4x4math::identity(long long* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
__int128* matrix4x4math::identity(__int128* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
float* matrix4x4math::identity(float* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
double* matrix4x4math::identity(double* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
__float128* matrix4x4math::identity(__float128* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }

char matrix4x4math::determinantI8(char* matrix) { char d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
short matrix4x4math::determinantI16(char* matrix) { short d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
short matrix4x4math::determinantI16(short* matrix) { short d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
int matrix4x4math::determinantI32(short* matrix) { int d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
int matrix4x4math::determinantI32(int* matrix) { int d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
long long matrix4x4math::determinantI64(int* matrix) { long long d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
long long matrix4x4math::determinantI64(long long* matrix) { long long d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__int128 matrix4x4math::determinantI128(long long* matrix) { __int128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__int128 matrix4x4math::determinantI128(__int128* matrix) { __int128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
float matrix4x4math::determinantF32(float* matrix) { float d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
double matrix4x4math::determinantF64(float* matrix) { double d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
double matrix4x4math::determinantF64(double* matrix) { double d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__float128 matrix4x4math::determinantF128(double* matrix) { __float128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__float128 matrix4x4math::determinantF128(__float128* matrix) { __float128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }

char* matrix4x4math::translate(char* out, char* matrix, char* vector) { char x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
short* matrix4x4math::translate(short* out, char* matrix, char* vector) { char x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
short* matrix4x4math::translate(short* out, short* matrix, short* vector) { short x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
int* matrix4x4math::translate(int* out, short* matrix, short* vector) { short x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
int* matrix4x4math::translate(int* out, int* matrix, int* vector) { int x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
long long* matrix4x4math::translate(long long* out, int* matrix, int* vector) { int x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
long long* matrix4x4math::translate(long long* out, long long* matrix, long long* vector) { long long x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__int128* matrix4x4math::translate(__int128* out, long long* matrix, long long* vector) { long long x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__int128* matrix4x4math::translate(__int128* out, __int128* matrix, __int128* vector) { __int128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, char* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, short* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, int* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, long long* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, __int128* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, float* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, float* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, char* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, short* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, int* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, long long* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, __int128* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, float* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, double* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, double* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, char* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, short* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, int* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, long long* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, __int128* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, float* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, double* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, __float128* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }

float* matrix4x4math::rotateX(float* out, char* matrix, float angle) { float s = sinf(angle), c = cosf(angle); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
float* matrix4x4math::rotateX(float* out, short* matrix, float angle) { float s = sinf(angle), c = cosf(angle); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
float* matrix4x4math::rotateX(float* out, int* matrix, float angle) { float s = sinf(angle), c = cosf(angle); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
float* matrix4x4math::rotateX(float* out, long long* matrix, float angle) { float s = sinf(angle), c = cosf(angle); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
float* matrix4x4math::rotateX(float* out, __int128* matrix, float angle) { float s = sinf(angle), c = cosf(angle); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
float* matrix4x4math::rotateX(float* out, float* matrix, float angle) { float s = sinf(angle), c = cosf(angle), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, char* matrix, double angle) { double s = sin(angle), c = cos(angle); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, short* matrix, double angle) { double s = sin(angle), c = cos(angle); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, int* matrix, double angle) { double s = sin(angle), c = cos(angle); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, long long* matrix, double angle) { double s = sin(angle), c = cos(angle); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, __int128* matrix, double angle) { double s = sin(angle), c = cos(angle); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, float* matrix, double angle) { double s = sin(angle), c = cos(angle); float m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
double* matrix4x4math::rotateX(double* out, double* matrix, double angle) { double s = sin(angle), c = cos(angle), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, char* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, short* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, int* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, long long* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, __int128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, float* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); float m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, double* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); double m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }
__float128* matrix4x4math::rotateX(__float128* out, __float128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * c + m20 * s; out[5] = m11 * c + m21 * s; out[6] = m12 * c + m22 * s; out[7] = m13 * c + m23 * s; out[8] = m20 * c - m10 * s; out[9] = m21 * c - m11 * s; out[10] = m22 * c - m12 * s; out[11] = m23 * c - m13 * s; return out; }

float* matrix4x4math::rotateY(float* out, char* matrix, float angle) { float s = sinf(angle), c = cosf(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
float* matrix4x4math::rotateY(float* out, short* matrix, float angle) { float s = sinf(angle), c = cosf(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
float* matrix4x4math::rotateY(float* out, int* matrix, float angle) { float s = sinf(angle), c = cosf(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
float* matrix4x4math::rotateY(float* out, long long* matrix, float angle) { float s = sinf(angle), c = cosf(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
float* matrix4x4math::rotateY(float* out, __int128* matrix, float angle) { float s = sinf(angle), c = cosf(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
float* matrix4x4math::rotateY(float* out, float* matrix, float angle) { float s = sinf(angle), c = cosf(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, char* matrix, double angle) { double s = sin(angle), c = cos(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, short* matrix, double angle) { double s = sin(angle), c = cos(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11];  out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, int* matrix, double angle) { double s = sin(angle), c = cos(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, long long* matrix, double angle) { double s = sin(angle), c = cos(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, __int128* matrix, double angle) { double s = sin(angle), c = cos(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, float* matrix, double angle) { double s = sin(angle), c = cos(angle); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
double* matrix4x4math::rotateY(double* out, double* matrix, double angle) { double s = sin(angle), c = cos(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, char* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, short* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, int* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, long long* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, __int128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, float* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, double* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }
__float128* matrix4x4math::rotateY(__float128* out, __float128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c - m20 * s; out[1] = m01 * c - m21 * s; out[2] = m02 * c - m22 * s; out[3] = m03 * c - m23 * s; out[8] = m00 * s + m20 * c; out[9] = m01 * s + m21 * c; out[10] = m02 * s + m22 * c; out[11] = m03 * s + m23 * c; return out; }

float* matrix4x4math::rotateZ(float* out, char* matrix, float angle) { float s = sinf(angle), c = cosf(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
float* matrix4x4math::rotateZ(float* out, short* matrix, float angle) { float s = sinf(angle), c = cosf(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
float* matrix4x4math::rotateZ(float* out, int* matrix, float angle) { float s = sinf(angle), c = cosf(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
float* matrix4x4math::rotateZ(float* out, long long* matrix, float angle) { float s = sinf(angle), c = cosf(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
float* matrix4x4math::rotateZ(float* out, __int128* matrix, float angle) { float s = sinf(angle), c = cosf(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
float* matrix4x4math::rotateZ(float* out, float* matrix, float angle) { float s = sinf(angle), c = cosf(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, char* matrix, double angle) { double s = sin(angle), c = cos(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, short* matrix, double angle) { double s = sin(angle), c = cos(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, int* matrix, double angle) { double s = sin(angle), c = cos(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, long long* matrix, double angle) { double s = sin(angle), c = cos(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, __int128* matrix, double angle) { double s = sin(angle), c = cos(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, float* matrix, double angle) { double s = sin(angle), c = cos(angle); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
double* matrix4x4math::rotateZ(double* out, double* matrix, double angle) { double s = sin(angle), c = cos(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, char* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, short* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, int* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, long long* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, __int128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, float* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, double* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, __float128* matrix, __float128 angle) { __float128 s = sinq(angle), c = cosq(angle), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * c + m10 * s; out[1] = m01 * c + m11 * s; out[2] = m02 * c + m12 * s; out[3] = m03 * c + m13 * s; out[4] = m10 * c - m00 * s; out[5] = m11 * c - m01 * s; out[6] = m12 * c - m02 * s; out[7] = m13 * c - m03 * s; return out; }

float* matrix4x4math::frustrum(float* out, float left, float right, float bottom, float top, float near, float far) { float irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
double* matrix4x4math::frustrum(double* out, double left, double right, double bottom, double top, double near, double far) { double irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
__float128* matrix4x4math::frustrum(__float128* out, __float128 left, __float128 right, __float128 bottom, __float128 top, __float128 near, __float128 far) { __float128 irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }

float* matrix4x4math::ortho(float* out, float horizontal, float vertical, float near, float far) { float ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
double* matrix4x4math::ortho(double* out, double horizontal, double vertical, double near, double far) { double ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
__float128* matrix4x4math::ortho(__float128* out, __float128 horizontal, __float128 vertical, __float128 near, __float128 far) { __float128 ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }

float* matrix4x4math::perspectiveHorizontal(float* out, float aspect, float fovx, float near, float far) { float ittfot = 1 / tanf(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
double* matrix4x4math::perspectiveHorizontal(double* out, double aspect, double fovx, double near, double far) { double ittfot = 1 / tan(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
__float128* matrix4x4math::perspectiveHorizontal(__float128* out, __float128 aspect, __float128 fovx, __float128 near, __float128 far) { __float128 ittfot = 1 / tanq(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }

float* matrix4x4math::perspectiveVertical(float* out, float aspect, float fovy, float near, float far) { float ittfot = 1 / tanf(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
double* matrix4x4math::perspectiveVertical(double* out, double aspect, double fovy, double near, double far) { double ittfot = 1 / tan(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
__float128* matrix4x4math::perspectiveVertical(__float128* out, __float128 aspect, __float128 fovy, __float128 near, __float128 far) { __float128 ittfot = 1 / tanq(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
