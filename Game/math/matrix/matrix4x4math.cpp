#include "../math.h"

matrix4x4math::matrix4x4math() : matrixsquaremath(4) { }

char* matrix4x4math::squareMultiply(char* out, char* matrix, char* matrix1) { char ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
short* matrix4x4math::squareMultiply(short* out, char* matrix, char* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
short* matrix4x4math::squareMultiply(short* out, short* matrix, short* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
int* matrix4x4math::squareMultiply(int* out, short* matrix, short* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
int* matrix4x4math::squareMultiply(int* out, int* matrix, int* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
long long* matrix4x4math::squareMultiply(long long* out, int* matrix, int* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
long long* matrix4x4math::squareMultiply(long long* out, long long* matrix, long long* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__int128* matrix4x4math::squareMultiply(__int128* out, long long* matrix, long long* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__int128* matrix4x4math::squareMultiply(__int128* out, __int128* matrix, __int128* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
float* matrix4x4math::squareMultiply(float* out, float* matrix, float* matrix1) { float ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
double* matrix4x4math::squareMultiply(double* out, float* matrix, float* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
double* matrix4x4math::squareMultiply(double* out, double* matrix, double* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__float128* matrix4x4math::squareMultiply(__float128* out, double* matrix, double* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }
__float128* matrix4x4math::squareMultiply(__float128* out, __float128* matrix, __float128* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[4] + matrix[2] * matrix1[8] + matrix[3] * matrix1[12], matrix[0] * matrix1[1] + matrix[1] * matrix1[5] + matrix[2] * matrix1[9] + matrix[3] * matrix1[13], matrix[0] * matrix1[2] + matrix[1] * matrix1[6] + matrix[2] * matrix1[10] + matrix[3] * matrix1[14], matrix[0] * matrix1[3] + matrix[1] * matrix1[7] + matrix[2] * matrix1[11] + matrix[3] * matrix1[15], matrix[4] * matrix1[0] + matrix[5] * matrix1[4] + matrix[6] * matrix1[8] + matrix[7] * matrix1[12], matrix[4] * matrix1[1] + matrix[5] * matrix1[5] + matrix[6] * matrix1[9] + matrix[7] * matrix1[13], matrix[4] * matrix1[2] + matrix[5] * matrix1[6] + matrix[6] * matrix1[10] + matrix[7] * matrix1[14], matrix[4] * matrix1[3] + matrix[5] * matrix1[7] + matrix[6] * matrix1[11] + matrix[7] * matrix1[15], matrix[8] * matrix1[0] + matrix[9] * matrix1[4] + matrix[10] * matrix1[8] + matrix[11] * matrix1[12], matrix[8] * matrix1[1] + matrix[9] * matrix1[5] + matrix[10] * matrix1[9] + matrix[11] * matrix1[13], matrix[8] * matrix1[2] + matrix[9] * matrix1[6] + matrix[10] * matrix1[10] + matrix[11] * matrix1[14], matrix[8] * matrix1[3] + matrix[9] * matrix1[7] + matrix[10] * matrix1[11] + matrix[11] * matrix1[15], matrix[12] * matrix1[0] + matrix[13] * matrix1[4] + matrix[14] * matrix1[8] + matrix[15] * matrix1[12], matrix[12] * matrix1[1] + matrix[13] * matrix1[5] + matrix[14] * matrix1[9] + matrix[15] * matrix1[13], matrix[12] * matrix1[2] + matrix[13] * matrix1[6] + matrix[14] * matrix1[10] + matrix[15] * matrix1[14], matrix[12] * matrix1[3] + matrix[13] * matrix1[7] + matrix[14] * matrix1[11] + matrix[15] * matrix1[15] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8], out[9] = ret[9], out[10] = ret[10], out[11] = ret[11], out[12] = ret[12], out[13] = ret[13], out[14] = ret[14], out[15] = ret[15]; return out; }

char* matrix4x4math::identity(char* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
short* matrix4x4math::identity(short* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
int* matrix4x4math::identity(int* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
long long* matrix4x4math::identity(long long* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
__int128* matrix4x4math::identity(__int128* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
float* matrix4x4math::identity(float* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
double* matrix4x4math::identity(double* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }
__float128* matrix4x4math::identity(__float128* out) { out[0] = out[5] = out[10] = out[15] = 1; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = out[14] = 0; return out; }

char matrix4x4math::determinantI8(char* matrix) { char d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
short matrix4x4math::determinantI16(char* matrix) { short d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
short matrix4x4math::determinantI16(short* matrix) { short d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
int matrix4x4math::determinantI32(short* matrix) { int d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
int matrix4x4math::determinantI32(int* matrix) { int d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
long long matrix4x4math::determinantI64(int* matrix) { long long d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
long long matrix4x4math::determinantI64(long long* matrix) { long long d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__int128 matrix4x4math::determinantI128(long long* matrix) { __int128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__int128 matrix4x4math::determinantI128(__int128* matrix) { __int128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
float matrix4x4math::determinantF32(float* matrix) { float d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
double matrix4x4math::determinantF64(float* matrix) { double d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
double matrix4x4math::determinantF64(double* matrix) { double d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__float128 matrix4x4math::determinantF128(double* matrix) { __float128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }
__float128 matrix4x4math::determinantF128(__float128* matrix) { __float128 d01 = matrix[8] * matrix[13] - matrix[9] * matrix[12], d02 = matrix[8] * matrix[14] - matrix[10] * matrix[12], d03 = matrix[8] * matrix[15] - matrix[11] * matrix[12], d12 = matrix[9] * matrix[14] - matrix[10] * matrix[13], d13 = matrix[9] * matrix[15] - matrix[11] * matrix[13], d23 = matrix[10] * matrix[15] - matrix[11] * matrix[14]; return matrix[0] * (matrix[5] * d23 - matrix[6] * d13 + matrix[7] * d12) - matrix[1] * (matrix[4] * d23 - matrix[6] * d03 + matrix[7] * d02) + matrix[2] * (matrix[4] * d13 - matrix[5] * d03 + matrix[7] * d01) - matrix[3] * (matrix[4] * d12 - matrix[5] * d02 + matrix[6] * d01); }

char* matrix4x4math::translate(char* out, char* matrix, char* vector) { char x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
short* matrix4x4math::translate(short* out, char* matrix, char* vector) { char x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
short* matrix4x4math::translate(short* out, short* matrix, short* vector) { short x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
int* matrix4x4math::translate(int* out, short* matrix, short* vector) { short x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
int* matrix4x4math::translate(int* out, int* matrix, int* vector) { int x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
long long* matrix4x4math::translate(long long* out, int* matrix, int* vector) { int x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
long long* matrix4x4math::translate(long long* out, long long* matrix, long long* vector) { long long x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__int128* matrix4x4math::translate(__int128* out, long long* matrix, long long* vector) { long long x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__int128* matrix4x4math::translate(__int128* out, __int128* matrix, __int128* vector) { __int128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, char* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, short* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, int* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, long long* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, __int128* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
float* matrix4x4math::translate(float* out, float* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, float* matrix, float* vector) { float x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, char* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, short* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, int* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, long long* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, __int128* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, float* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
double* matrix4x4math::translate(double* out, double* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, double* matrix, double* vector) { double x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, char* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, short* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, int* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, long long* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, __int128* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, float* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, double* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }
__float128* matrix4x4math::translate(__float128* out, __float128* matrix, __float128* vector) { __float128 x = vector[0], y = vector[1], z = vector[2]; out[12] = x * (out[0] = matrix[0]) + y * (out[4] = matrix[4]) + z * (out[8] = matrix[8]) + matrix[12]; out[13] = x * (out[1] = matrix[1]) + y * (out[5] = matrix[5]) + z * (out[9] = matrix[9]) + matrix[13]; out[14] = x * (out[2] = matrix[2]) + y * (out[6] = matrix[6]) + z * (out[10] = matrix[10]) + matrix[14]; out[15] = x * (out[3] = matrix[3]) + y * (out[7] = matrix[7]) + z * (out[11] = matrix[11]) + matrix[15]; return out; }

float* matrix4x4math::rotateX(float* out, char* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateX(float* out, short* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateX(float* out, int* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateX(float* out, long long* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateX(float* out, __int128* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateX(float* out, float* matrix, float anglex) { float sx = sinf(anglex), cx = cosf(anglex), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, char* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, short* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, int* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, long long* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, __int128* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, float* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex); float m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateX(double* out, double* matrix, double anglex) { double sx = sin(anglex), cx = cos(anglex), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, char* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); char m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, short* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); short m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, int* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); int m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, long long* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); long long m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, __int128* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); __int128 m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, float* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); float m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, double* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex); double m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateX(__float128* out, __float128* matrix, __float128 anglex) { __float128 sx = sinq(anglex), cx = cosq(anglex), m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[0] = matrix[0]; out[1] = matrix[1]; out[2] = matrix[2]; out[3] = matrix[3]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }

float* matrix4x4math::rotateY(float* out, char* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateY(float* out, short* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateY(float* out, int* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateY(float* out, long long* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateY(float* out, __int128* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateY(float* out, float* matrix, float angley) { float sy = sinf(angley), cy = cosf(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, char* matrix, double angley) { double sy = sin(angley), cy = cos(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, short* matrix, double angley) { double sy = sin(angley), cy = cos(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11];  out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, int* matrix, double angley) { double sy = sin(angley), cy = cos(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, long long* matrix, double angley) { double sy = sin(angley), cy = cos(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, __int128* matrix, double angley) { double sy = sin(angley), cy = cos(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, float* matrix, double angley) { double sy = sin(angley), cy = cos(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateY(double* out, double* matrix, double angley) { double sy = sin(angley), cy = cos(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, char* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, short* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, int* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, long long* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, __int128* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, float* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, double* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateY(__float128* out, __float128* matrix, __float128 angley) { __float128 sy = sinq(angley), cy = cosq(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; if(out != matrix) { out[4] = matrix[4]; out[5] = matrix[5]; out[6] = matrix[6]; out[7] = matrix[7]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }

float* matrix4x4math::rotateZ(float* out, char* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
float* matrix4x4math::rotateZ(float* out, short* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
float* matrix4x4math::rotateZ(float* out, int* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
float* matrix4x4math::rotateZ(float* out, long long* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
float* matrix4x4math::rotateZ(float* out, __int128* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
float* matrix4x4math::rotateZ(float* out, float* matrix, float anglez) { float sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, char* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, short* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, int* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, long long* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, __int128* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, float* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
double* matrix4x4math::rotateZ(double* out, double* matrix, double anglez) { double sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, char* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, short* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, int* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, long long* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, __int128* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, float* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, double* matrix, __float128 anglez) { __float128 sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }
__float128* matrix4x4math::rotateZ(__float128* out, __float128* matrix, __float128 anglez) { std::cout << (double)anglez << std::endl; __float128 sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7]; if(out != matrix) { out[8] = matrix[8]; out[9] = matrix[9]; out[10] = matrix[10]; out[11] = matrix[11]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; } out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; return out; }

float* matrix4x4math::rotateXY(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXY(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXY(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXY(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXY(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXY(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXY(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXY(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[0] = matrix[0]; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - n20 * sy; out[1] = m01 * cy - n21 * sy; out[2] = m02 * cy - n22 * sy; out[3] = m03 * cy - n23 * sy; out[4] = m10 * cx + m20 * sx; out[5] = m11 * cx + m21 * sx; out[6] = m12 * cx + m22 * sx; out[7] = m13 * cx + m23 * sx; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }

float* matrix4x4math::rotateXZ(float* out, char* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateXZ(float* out, short* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateXZ(float* out, int* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateXZ(float* out, long long* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateXZ(float* out, __int128* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateXZ(float* out, float* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, char* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, short* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, int* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, long long* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, __int128* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, float* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateXZ(double* out, double* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateXZ(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + n10 * sz; out[1] = m01 * cz + n11 * sz; out[2] = m02 * cz + n12 * sz; out[3] = m03 * cz + n13 * sz; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = m20 * cx - m10 * sx; out[9] = m21 * cx - m11 * sx; out[10] = m22 * cx - m12 * sx; out[11] = m23 * cx - m13 * sx; return out; }

float* matrix4x4math::rotateXYZ(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXYZ(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXYZ(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXYZ(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXYZ(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXYZ(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXYZ(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXYZ(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx, n00 = m00 * cy - n20 * sy, n01 = m01 * cy - n21 * sy, n02 = m02 * cy - n22 * sy, n03 = m03 * cy - n23 * sy, n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = m00 * sy + n20 * cy; out[9] = m01 * sy + n21 * cy; out[10] = m02 * sy + n22 * cy; out[11] = m03 * sy + n23 * cy; return out; }

float* matrix4x4math::rotateXZY(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXZY(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXZY(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXZY(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXZY(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateXZY(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateXZY(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateXZY(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cx + m20 * sx, n11 = m11 * cx + m21 * sx, n12 = m12 * cx + m22 * sx, n13 = m13 * cx + m23 * sx, n00 = m00 * cz + n10 * sz, n01 = m01 * cz + n11 * sz, n02 = m02 * cz + n12 * sz, n03 = m03 * cz + n13 * sz, n20 = m20 * cx - m10 * sx, n21 = m21 * cx - m11 * sx, n22 = m22 * cx - m12 * sx, n23 = m23 * cx - m13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cz - m00 * sz; out[5] = n11 * cz - m01 * sz; out[6] = n12 * cz - m02 * sz; out[7] = n13 * cz - m03 * sz; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }

float* matrix4x4math::rotateYX(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYX(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYX(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYX(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYX(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYX(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYX(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYX(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cy - m20 * sy; out[1] = m01 * cy - m21 * sy; out[2] = m02 * cy - m22 * sy; out[3] = m03 * cy - m23 * sy; out[4] = m10 * cx + n20 * sx; out[5] = m11 * cx + n21 * sx; out[6] = m12 * cx + n22 * sx; out[7] = m13 * cx + n23 * sx; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }

float* matrix4x4math::rotateYZ(float* out, char* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateYZ(float* out, short* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateYZ(float* out, int* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateYZ(float* out, long long* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateYZ(float* out, __int128* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateYZ(float* out, float* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, char* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, short* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, int* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, long long* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, __int128* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, float* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateYZ(double* out, double* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, char* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, short* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, int* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, long long* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, __int128* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, float* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, double* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateYZ(__float128* out, __float128* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = m10 * cz - n00 * sz; out[5] = m11 * cz - n01 * sz; out[6] = m12 * cz - n02 * sz; out[7] = m13 * cz - n03 * sz; out[8] = m00 * sy + m20 * cy; out[9] = m01 * sy + m21 * cy; out[10] = m02 * sy + m22 * cy; out[11] = m03 * sy + m23 * cy; return out; }

float* matrix4x4math::rotateYXZ(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYXZ(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYXZ(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYXZ(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYXZ(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
float* matrix4x4math::rotateYXZ(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
double* matrix4x4math::rotateYXZ(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }
__float128* matrix4x4math::rotateYXZ(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy, n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cx + n20 * sx, n11 = m11 * cx + n21 * sx, n12 = m12 * cx + n22 * sx, n13 = m13 * cx + n23 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + n10 * sz; out[1] = n01 * cz + n11 * sz; out[2] = n02 * cz + n12 * sz; out[3] = n03 * cz + n13 * sz; out[4] = n10 * cz - n00 * sz; out[5] = n11 * cz - n01 * sz; out[6] = n12 * cz - n02 * sz; out[7] = n13 * cz - n03 * sz; out[8] = n20 * cx - m10 * sx; out[9] = n21 * cx - m11 * sx; out[10] = n22 * cx - m12 * sx; out[11] = n23 * cx - m13 * sx; return out; }

float* matrix4x4math::rotateYZX(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateYZX(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateYZX(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateYZX(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateYZX(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateYZX(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateYZX(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateYZX(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cy - m20 * sy, n01 = m01 * cy - m21 * sy, n02 = m02 * cy - m22 * sy, n03 = m03 * cy - m23 * sy, n10 = m10 * cz - n00 * sz, n11 = m11 * cz - n01 * sz, n12 = m12 * cz - n02 * sz, n13 = m13 * cz - n03 * sz, n20 = m00 * sy + m20 * cy, n21 = m01 * sy + m21 * cy, n22 = m02 * sy + m22 * cy, n23 = m03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cz + m10 * sz; out[1] = n01 * cz + m11 * sz; out[2] = n02 * cz + m12 * sz; out[3] = n03 * cz + m13 * sz; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }

float* matrix4x4math::rotateZX(float* out, char* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZX(float* out, short* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZX(float* out, int* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZX(float* out, long long* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZX(float* out, __int128* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZX(float* out, float* matrix, float* angles) { float anglex = angles[0], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, char* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, short* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, int* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[0] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, long long* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, __int128* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, float* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZX(double* out, double* matrix, double* angles) { double anglex = angles[0], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZX(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = m00 * cz + m10 * sz; out[1] = m01 * cz + m11 * sz; out[2] = m02 * cz + m12 * sz; out[3] = m03 * cz + m13 * sz; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = m20 * cx - n10 * sx; out[9] = m21 * cx - n11 * sx; out[10] = m22 * cx - n12 * sx; out[11] = m23 * cx - n13 * sx; return out; }

float* matrix4x4math::rotateZY(float* out, char* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateZY(float* out, short* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateZY(float* out, int* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateZY(float* out, long long* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateZY(float* out, __int128* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
float* matrix4x4math::rotateZY(float* out, float* matrix, float* angles) { float angley = angles[1], anglez = angles[2], sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, char* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, short* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, int* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, long long* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, __int128* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, float* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
double* matrix4x4math::rotateZY(double* out, double* matrix, double* angles) { double angley = angles[1], anglez = angles[2], sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, char* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, short* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, int* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, long long* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, __int128* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, float* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, double* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }
__float128* matrix4x4math::rotateZY(__float128* out, __float128* matrix, __float128* angles) { __float128 angley = angles[1], anglez = angles[2], sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = m10 * cz - m00 * sz; out[5] = m11 * cz - m01 * sz; out[6] = m12 * cz - m02 * sz; out[7] = m13 * cz - m03 * sz; out[8] = n00 * sy + m20 * cy; out[9] = n01 * sy + m21 * cy; out[10] = n02 * sy + m22 * cy; out[11] = n03 * sy + m23 * cy; return out; }

float* matrix4x4math::rotateZXY(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateZXY(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateZXY(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateZXY(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateZXY(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
float* matrix4x4math::rotateZXY(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
double* matrix4x4math::rotateZXY(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }
__float128* matrix4x4math::rotateZXY(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n20 = m20 * cx - n10 * sx, n21 = m21 * cx - n11 * sx, n22 = m22 * cx - n12 * sx, n23 = m23 * cx - n13 * sx; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - n20 * sy; out[1] = n01 * cy - n21 * sy; out[2] = n02 * cy - n22 * sy; out[3] = n03 * cy - n23 * sy; out[4] = n10 * cx + m20 * sx; out[5] = n11 * cx + m21 * sx; out[6] = n12 * cx + m22 * sx; out[7] = n13 * cx + m23 * sx; out[8] = n00 * sy + n20 * cy; out[9] = n01 * sy + n21 * cy; out[10] = n02 * sy + n22 * cy; out[11] = n03 * sy + n23 * cy; return out; }

float* matrix4x4math::rotateZYX(float* out, char* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZYX(float* out, short* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZYX(float* out, int* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZYX(float* out, long long* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZYX(float* out, __int128* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; float n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
float* matrix4x4math::rotateZYX(float* out, float* matrix, float* angles) { float anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinf(anglex), cx = cosf(anglex), sy = sinf(angley), cy = cosf(angley), sz = sinf(anglez), cz = cosf(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, char* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, short* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, int* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, long long* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, __int128* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, float* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; double n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
double* matrix4x4math::rotateZYX(double* out, double* matrix, double* angles) { double anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sin(anglex), cx = cos(anglex), sy = sin(angley), cy = cos(angley), sz = sin(anglez), cz = cos(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, char* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); char m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, short* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); short m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, int* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); int m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, long long* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); long long m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, __int128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); __int128 m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, float* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); float m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, double* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez); double m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11]; __float128 n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }
__float128* matrix4x4math::rotateZYX(__float128* out, __float128* matrix, __float128* angles) { __float128 anglex = angles[0], angley = angles[1], anglez = angles[2], sx = sinq(anglex), cx = cosq(anglex), sy = sinq(angley), cy = cosq(angley), sz = sinq(anglez), cz = cosq(anglez), m00 = matrix[0], m01 = matrix[1], m02 = matrix[2], m03 = matrix[3], m10 = matrix[4], m11 = matrix[5], m12 = matrix[6], m13 = matrix[7], m20 = matrix[8], m21 = matrix[9], m22 = matrix[10], m23 = matrix[11], n00 = m00 * cz + m10 * sz, n01 = m01 * cz + m11 * sz, n02 = m02 * cz + m12 * sz, n03 = m03 * cz + m13 * sz, n10 = m10 * cz - m00 * sz, n11 = m11 * cz - m01 * sz, n12 = m12 * cz - m02 * sz, n13 = m13 * cz - m03 * sz, n20 = n00 * sy + m20 * cy, n21 = n01 * sy + m21 * cy, n22 = n02 * sy + m22 * cy, n23 = n03 * sy + m23 * cy; out[12] = matrix[12]; out[13] = matrix[13]; out[14] = matrix[14]; out[15] = matrix[15]; out[0] = n00 * cy - m20 * sy; out[1] = n01 * cy - m21 * sy; out[2] = n02 * cy - m22 * sy; out[3] = n03 * cy - m23 * sy; out[4] = n10 * cx + n20 * sx; out[5] = n11 * cx + n21 * sx; out[6] = n12 * cx + n22 * sx; out[7] = n13 * cx + n23 * sx; out[8] = n20 * cx - n10 * sx; out[9] = n21 * cx - n11 * sx; out[10] = n22 * cx - n12 * sx; out[11] = n23 * cx - n13 * sx; return out; }

float* matrix4x4math::frustrum(float* out, float left, float right, float bottom, float top, float near, float far) { float irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
double* matrix4x4math::frustrum(double* out, double left, double right, double bottom, double top, double near, double far) { double irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
__float128* matrix4x4math::frustrum(__float128* out, __float128 left, __float128 right, __float128 bottom, __float128 top, __float128 near, __float128 far) { __float128 irml = 1 / (right - left), itmb = 1 / (top - bottom), ifmn = 1 / (far - near); out[0] = 2 * irml; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = 0; out[5] = 2 * itmb; out[10] = 2 * ifmn; out[12] = (right + left) * -irml; out[13] = (top + bottom) * -itmb; out[14] = (far + near) * -ifmn; out[15] = 1; return out; }

float* matrix4x4math::ortho(float* out, float horizontal, float vertical, float near, float far) { float ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
double* matrix4x4math::ortho(double* out, double horizontal, double vertical, double near, double far) { double ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }
__float128* matrix4x4math::ortho(__float128* out, __float128 horizontal, __float128 vertical, __float128 near, __float128 far) { __float128 ifmn = 1 / (far - near); out[0] = 2 / horizontal; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[11] = out[12] = out[13] = 0; out[5] = 2 / vertical; out[10] = 2 * ifmn;  out[14] = (far + near) * -ifmn; out[15] = 1; return out; }

float* matrix4x4math::perspectiveHorizontal(float* out, float aspect, float fovx, float near, float far) { float ittfot = 1 / tanf(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
double* matrix4x4math::perspectiveHorizontal(double* out, double aspect, double fovx, double near, double far) { double ittfot = 1 / tan(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
__float128* matrix4x4math::perspectiveHorizontal(__float128* out, __float128 aspect, __float128 fovx, __float128 near, __float128 far) { __float128 ittfot = 1 / tanq(fovx / 2), inmf = 1 / (near - far); out[0] = ittfot; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot * aspect; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }

float* matrix4x4math::perspectiveVertical(float* out, float aspect, float fovy, float near, float far) { float ittfot = 1 / tanf(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
double* matrix4x4math::perspectiveVertical(double* out, double aspect, double fovy, double near, double far) { double ittfot = 1 / tan(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
__float128* matrix4x4math::perspectiveVertical(__float128* out, __float128 aspect, __float128 fovy, __float128 near, __float128 far) { __float128 ittfot = 1 / tanq(fovy / 2), inmf = 1 / (near - far); out[0] = ittfot / aspect; out[1] = out[2] = out[3] = out[4] = out[6] = out[7] = out[8] = out[9] = out[12] = out[13] = out[15] = 0; out[5] = ittfot; out[10] = (near + far) * inmf; out[11] = -1; out[14] = 2 * near * far * inmf; return out; }
