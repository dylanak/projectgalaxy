#include "../math.h"

matrix3x3math::matrix3x3math() : matrixsquaremath(3) { }

char* matrix3x3math::squareMultiply(char* out, char* matrix, char* matrix1) { char ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
short* matrix3x3math::squareMultiply(short* out, char* matrix, char* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
short* matrix3x3math::squareMultiply(short* out, short* matrix, short* matrix1) { short ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
int* matrix3x3math::squareMultiply(int* out, short* matrix, short* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
int* matrix3x3math::squareMultiply(int* out, int* matrix, int* matrix1) { int ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
long long* matrix3x3math::squareMultiply(long long* out, int* matrix, int* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
long long* matrix3x3math::squareMultiply(long long* out, long long* matrix, long long* matrix1) { long long ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
__int128* matrix3x3math::squareMultiply(__int128* out, long long* matrix, long long* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
__int128* matrix3x3math::squareMultiply(__int128* out, __int128* matrix, __int128* matrix1) { __int128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
float* matrix3x3math::squareMultiply(float* out, float* matrix, float* matrix1) { float ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
double* matrix3x3math::squareMultiply(double* out, float* matrix, float* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
double* matrix3x3math::squareMultiply(double* out, double* matrix, double* matrix1) { double ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
__float128* matrix3x3math::squareMultiply(__float128* out, double* matrix, double* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }
__float128* matrix3x3math::squareMultiply(__float128* out, __float128* matrix, __float128* matrix1) { __float128 ret[] { matrix[0] * matrix1[0] + matrix[1] * matrix1[3] + matrix[2] * matrix1[6], matrix[0] * matrix1[1] + matrix[1] * matrix1[4] + matrix[2] * matrix1[7], matrix[0] * matrix1[2] + matrix[1] * matrix1[5] + matrix[2] * matrix1[8], matrix[3] * matrix1[0] + matrix[4] * matrix1[3] + matrix[5] * matrix1[6], matrix[3] * matrix1[1] + matrix[4] * matrix1[4] + matrix[5] * matrix1[7], matrix[3] * matrix1[2] + matrix[4] * matrix1[5] + matrix[5] * matrix1[8], matrix[6] * matrix1[0] + matrix[7] * matrix1[3] + matrix[8] * matrix1[6], matrix[6] * matrix1[1] + matrix[7] * matrix1[4] + matrix[8] * matrix1[7], matrix[6] * matrix1[2] + matrix[7] * matrix1[5] + matrix[8] * matrix1[8] }; out[0] = ret[0], out[1] = ret[1], out[2] = ret[2], out[3] = ret[3], out[4] = ret[4], out[5] = ret[5], out[6] = ret[6], out[7] = ret[7], out[8] = ret[8]; return out; }

char* matrix3x3math::identity(char* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
short* matrix3x3math::identity(short* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
int* matrix3x3math::identity(int* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
long long* matrix3x3math::identity(long long* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
__int128* matrix3x3math::identity(__int128* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
float* matrix3x3math::identity(float* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
double* matrix3x3math::identity(double* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }
__float128* matrix3x3math::identity(__float128* out) { out[0] = out[4] = out[8] = 1; out[1] = out[2] = out[3] = out[5] = out[6] = out[7] = 0; return out; }

char matrix3x3math::determinantI8(char* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
short matrix3x3math::determinantI16(char* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
short matrix3x3math::determinantI16(short* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
int matrix3x3math::determinantI32(short* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
int matrix3x3math::determinantI32(int* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
long long matrix3x3math::determinantI64(int* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
long long matrix3x3math::determinantI64(long long* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
__int128 matrix3x3math::determinantI128(long long* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
__int128 matrix3x3math::determinantI128(__int128* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
float matrix3x3math::determinantF32(float* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
double matrix3x3math::determinantF64(float* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
double matrix3x3math::determinantF64(double* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
__float128 matrix3x3math::determinantF128(double* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
__float128 matrix3x3math::determinantF128(__float128* matrix) { return matrix[0] * (matrix[4] * matrix[8] - matrix[5] * matrix[7]) - matrix[1] * (matrix[3] * matrix[8] - matrix[5] * matrix[6]) + matrix[2] * (matrix[0] * matrix[7] - matrix[1] * matrix[6]); }
